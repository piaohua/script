#!/bin/bash

usage() {
    echo " ./ctrl cmd "
    echo " cmd : build (server|robot) (linux) "
    echo " cmd : start (server|robot) "
    echo " cmd : status (server|robot) "
    echo " cmd : stop (server|robot) "
    echo " cmd : restart, sync, proto, bb "
}

appName=niu

workDir=$(cd `dirname $0`; pwd)

cd $workDir

GOPATH=$(cd ../"$(dirname "$0")"; pwd)

SUI_SRC_DIR="${GOPATH}/src/${appName}"

PROTO_SRC="${workDir}/proto"
PROTO_DIR="${SUI_SRC_DIR}/protocol"

SERVER="${SUI_SRC_DIR}/server.go"
ROBOT="${SUI_SRC_DIR}/robot.go"

SERVER_BIN="${workDir}/${appName}-server"
ROBOT_BIN="${workDir}/${appName}-robot"

SERVER_PID="${workDir}/${appName}-server.pid"
ROBOT_PID="${workDir}/${appName}-robot.pid"

get_src_file() {
    case $1 in
        server)
            echo ${SERVER}
            ;;
        robot)
            echo ${ROBOT}
            ;;
    esac
}

get_bin_file() {
    case $1 in
        server)
            echo ${SERVER_BIN}
            ;;
        robot)
            echo ${ROBOT_BIN}
            ;;
    esac
}

get_pid_file() {
    case $1 in
        server)
            echo ${SERVER_PID}
            ;;
        robot)
            echo ${ROBOT_PID}
            ;;
    esac
}

get_pid() {
    binFile=`get_bin_file $1`
    if [[ ${binFile} == '' ]]; then
        return 1
    fi
    ps aux | grep '${binFile}' | grep -v grep | awk '{print $2}' | head -1
}

# 同步更新
sync() {
    if [[ ${SERVER_BIN} == '' ]]; then
        echo "文件不存在"
        exit 1
    fi
    if [[ ${ROBOT_BIN} == '' ]]; then
        echo "文件不存在"
        exit 1
    fi
    ~/data/ssh scp-up 8 ${SERVER_BIN} /data/niu/
    ~/data/ssh scp-up 8 ${ROBOT_BIN} /data/niu/
}

# 生成协议
proto() {
    if [[ ! -d ${PROTO_SRC} ]]; then
        echo "协议文件路径不存在"
        exit 1
    fi
    cd ${PROTO_SRC}
    export GOPATH=${GOPATH}
    protoc --go_out=${PROTO_DIR},import_path=${PROTO_DIR}:${PROTO_DIR} *.proto
}

build() {
    export GOPATH=${GOPATH}
    binFile=`get_bin_file $1`
    srcFile=`get_src_file $1`
    case $2 in
        linux)
            export CGO_ENABLED=0
            export GOOS=linux
            export GOARCH=amd64
            export GOPATH=${GOPATH}
            echo -n "编译LINUX版本 ... "
            ;;
    esac
    if [[ ${binFile} == '' ]]; then
        echo "未指定输出文件"
        exit 1
    fi
    if [[ ! -e ${srcFile} ]]; then
        echo "文件不存在"
        exit 1
    fi
    echo "编译中 ... "
    go build -o ${binFile} -ldflags "-w -s" ${srcFile}
}

bb() {
    build server
    build robot
}

start() {
    pidFile=`get_pid_file $1`
    if [[ -e ${pidFile} ]]; then
        pid=`cat ${pidFile}`
    else
        pid=`get_pid $1`
        if [[ $? -gt 0 ]]; then
            echo "失败, 执行文件不存在"
            exit 1
        fi
    fi
    if [ "$pid" != '' ]; then
        echo "服务正在运行中, 进程ID为${pid}"
    else
        binFile=`get_bin_file $1`
        if [[ ! -e ${binFile} ]]; then
            echo "执行BIN文件不存在"
            exit 1
        fi
        if [[ ${pidFile} == '' ]]; then
            echo "未指定输出PID文件"
            exit 1
        fi
        if [[ ${1} == '' ]]; then
            echo "未指定输出日志文件"
            exit 1
        fi
        echo -n "正在启动 ... "
        # nohup ${binFile} -log_dir="log" >/dev/null 2>$1.log &
        ${binFile} -log_dir="log" -stderrthreshold="ERROR" >/dev/null 2>$1.log &
        #${binFile} -log_dir="log" -stderrthreshold="ERROR" >/dev/null 2>&1 &
        echo $! > ${pidFile}
        sleep 3s
        status $1
    fi
}

status() {
    pidFile=`get_pid_file $1`
    if [[ -e ${pidFile} ]]; then
        pid=`cat ${pidFile}`
    else
        pid=`get_pid $1`
        if [[ $? -gt 0 ]]; then
            echo "失败, 执行文件不存在"
            exit 1
        fi
    fi
    if [[ -z "$pid" ]]; then
        echo "服务不在运行状态"
        exit 1
    fi
    exists=$(ps -ef | grep $pid | grep -v grep | wc -l)
    if [[ $exists -gt 0 ]]; then
        echo "服务正在运行中, 进程ID为${pid}"
    else
        echo "服务不在运行状态, 但进程ID文件存在"
    fi
}

stop() {
    pidFile=`get_pid_file $1`
    if [[ -e ${pidFile} ]]; then
        pid=`cat ${pidFile}`
        #rm -f $pidFile
        mv -f $pidFile $pidFile"_bak"
    else
        pid=`get_pid $1`
        if [[ $? -gt 0 ]]; then
            echo "失败, 执行文件不存在"
            exit 1
        fi
    fi
    if [ "$pid" != '' ]; then
        echo -n "正在停止 ... "
        #kill -9 $PID
        kill -2 $pid
        sleep 15s
        echo "$pid killed!"
    else
        echo "服务不在运行状态"
    fi
}

restart() {
    echo -n "正在重启 ... "
    stop $1
    sleep 1s
    start $1
}

case $1 in
    build)
        build $2 $3;;
    bb)
        bb;;
    start)
        start $2;;
    status)
        status $2;;
    stop)
        stop $2;;
    restart)
        restart $2;;
    sync)
        sync;;
    proto)
        proto;;
    *)
        usage;;
esac
